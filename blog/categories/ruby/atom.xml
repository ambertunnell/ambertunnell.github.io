<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | amber_tunnell = Rubyist.new]]></title>
  <link href="http://ambertunnell.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ambertunnell.github.io/"/>
  <updated>2014-08-20T22:34:33-04:00</updated>
  <id>http://ambertunnell.github.io/</id>
  <author>
    <name><![CDATA[Amber Tunnell]]></name>
    <email><![CDATA[amber.tunnell@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bubble Sort in Ruby]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/08/20/bubble-sort-in-ruby/"/>
    <updated>2014-08-20T21:37:50-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/08/20/bubble-sort-in-ruby</id>
    <content type="html"><![CDATA[<p><em>Sorting algorithms are rarely discussed in Ruby. Most sorting algorithm problems can be solved quite easily by using built-in Ruby methods. That being said, some people (especially interviewers) feel that it is important to understand the different sorting techniques available in computer science. Along those lines, here&rsquo;s a series of blog posts on sorting algorithms in Ruby!</em></p>

<p>We&rsquo;ll start with Bubble Sort.</p>

<p><strong>Bubble sort</strong> is a simple sorting algorithm.</p>

<ol>
  <li>You start by comparing the first two items in an array. If the first item is larger than the second, you swap the two items.</li> 
  <li>Then, you compare the second and third items. If the second is larger than the third, you swap them.</li>
  <li>Continue until you reach the end of the array.</li>
  <li>Then, you start from the beginning again and repeat the process until you have one full pass of the array in which you did not swap any items.</li>
  <li>You now have a sorted array!</li>
</ol>




<!-- more -->


<p>The name &lsquo;bubble sort&rsquo; derives from the event of the smaller numbers slowly &lsquo;bubbling&rsquo; to the front of the array through the swapping process.</p>

<p style="text-align:center;"> <img src="http://upload.wikimedia.org/wikipedia/commons/c/c8/Bubble-sort-example-300px.gif" title="Bubble Sort" alt="bubble sort video" /></p>

<p>Here&rsquo;s the bubble sort algorithm implemented in Ruby.</p>

<p>```ruby bubble sort
class BubbleSort</p>

<p>  def initialize(array)</p>

<pre><code>@array = array
</code></pre>

<p>  end</p>

<p>  def sort</p>

<pre><code>loop do 
  i = 1
  swap_number = 0
 while i &lt; @array.length 
   if @array[i-1] &gt; @array[i]
    @array[i-1], @array[i] = @array[i], @array[i-1] 
    swap_number += 1
   end
   i+=1
 end
  break if swap_number == 0
end 
return @array
</code></pre>

<p>  end</p>

<p>end</p>

<p>print BubbleSort.new([4,1,2,6,3,5]).sort #=> [1, 2, 3, 4, 5, 6]
```</p>

<p>One of the biggest problems with using bubble sort is that it isn&rsquo;t practical on large data sets. It is incredibly inefficient with a worst-case time complexity of Ðž(n<sup>2</sup>).</p>

<p>In the best-case where the array is already sorted, the time complexity is O(n) because it only has to do one pass of the array, whereas most other algorithms still have to go through all their steps even when given an already-sorted array.</p>

<p>That being said, bubble sort is still a very undesirable and inefficient sorting technique.</p>

<p><em>This is the first post of a series of posts on various sorting algorithms.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyzing instance variables in Ruby]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/06/29/analyzing-instance-variables-in-ruby/"/>
    <updated>2014-06-29T21:26:29-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/06/29/analyzing-instance-variables-in-ruby</id>
    <content type="html"><![CDATA[<p>Instance variables in Ruby can be accessed in two ways. Directly with an @ symbol, <code>@variable</code>, or through a method call, <code>self.variable</code>. Many Rubyists think these are synonymous. However, they are not.</p>

<p>By accessing the data through the method call, you are protecting the data from being accessed directly. Therefore, if the data changes unexpectedly, you will only have to adjust the one method. If you access the data directly throughout your code, you may have to change it many times so that your code doesn&rsquo;t break.</p>

<p>It is a fine distinction, but can become an incredibly important one the larger your program is.</p>

<!-- more -->


<p>Here&rsquo;s an example. Let&rsquo;s set up a basic class to get us started.</p>

<p>```ruby Cat class
class Cat</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age
</code></pre>

<p>  end</p>

<p>end<br/>
```
This Cat class can be initialized with two variables: @name and @age.</p>

<p>Now, let&rsquo;s make our class more interesting.</p>

<p>```ruby Cat class
class Cat</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age
</code></pre>

<p>  end</p>

<p>  def age_in_human_years</p>

<pre><code>if @age == 0
  @human_age = 0
elsif @age == 1
  @human_age = 15  
else 
  @human_age = 16 + @age * 4
end  
</code></pre>

<p>  end</p>

<p>end<br/>
```
Now, we have a method that accesses the @age instance variable that is initialized upon instantiation. By using &lsquo;@&rsquo; instead of &lsquo;self&rsquo;, we are directly accessing that variable.</p>

<p>But, what if we wanted a variable that actually equals age + 2? We could add in that variable and use it throughout. Like so:</p>

<p>```ruby Cat class
class Cat</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age
@new_age = age + 2 #=&gt; addition
</code></pre>

<p>  end</p>

<p>  def age_in_human_years</p>

<pre><code>if @new_age == 0 #=&gt; change 1
  @human_age = 0
elsif @new_age == 1 #=&gt; change 2
  @human_age = 15  
else 
  @human_age = 16 + @new_age * 4 #=&gt; change 3 
end  
</code></pre>

<p>  end</p>

<p>end<br/>
<code>``
One could argue that we could've just initialized @age to be equal to age+2, but I think that would go against Ruby convention and confuse matters. Plus, we could then never access both</code>age<code>and</code>age+2<code>.</code>@age` would be stuck at age + 2.</p>

<p>Okay, we made those changes. That wasn&rsquo;t too hard. However, what if we referenced this variable in a thousand different places? It just wouldn&rsquo;t be feasible or desirable to have to comb through the code and change them all.</p>

<p>Here&rsquo;s where <code>self</code> comes in. Let&rsquo;s go back one step and reimplement the example with <code>self</code>.</p>

<p>```ruby Cat class
class Cat</p>

<p>  attr_reader :age</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age
</code></pre>

<p>  end</p>

<p>  def age_in_human_years</p>

<pre><code>if self.age == 0
  @human_age = 0
elsif self.age == 1
  @human_age = 15  
else 
  @human_age = 16 + self.age * 4
end  
</code></pre>

<p>  end</p>

<p>end<br/>
```</p>

<p>So, we changed the <code>@age</code> to <code>self.age</code> throughout. And, added in a <code>attr_reader</code>,  which is shorthand for this method:</p>

<p>```ruby attr_reader
  def age</p>

<pre><code>@age
</code></pre>

<p>  end
```</p>

<p>It merely creates a method that can access the instance variable. So, to clarify, when we reference @age we are accessing the variable data directly. But, when we use self.age (note: the &lsquo;self&rsquo; is actually optional), we are accessing the variable indirectly through this reader method.</p>

<p>So, again, say we want to make that age adjustment and add 2 to the given age.  Instead of adjusting the code accordingly, we can just create our own reader method for that variable.</p>

<p>```ruby Cat class
class Cat</p>

<p>  def age</p>

<pre><code>@age + 2
</code></pre>

<p>  end</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age 
</code></pre>

<p>  end</p>

<p>  def age_in_human_years</p>

<pre><code>if self.age == 0
  @human_age = 0
elsif self.age == 1
  @human_age = 15  
else 
  @human_age = 16 + self.age * 4
end  
</code></pre>

<p>  end</p>

<p>end<br/>
<code>``
The only thing we did this time for that change is delete the default</code>attr_reader<code>method and define a short method that changes the information received when one calls</code>.age<code>. Also, this way, we can preserve access to the original given age, by calling</code>@age<code>, and we can access @age+2, by calling</code>.age`.</p>

<p>The difference may seem insignificant. And, in small programs, it probably is. But, as programs grow larger, this may make a significant difference in how costly one change may be.If you are only directly accessing the data of an instance variable in one place, you only have to change it in one place. But, if you are directly accessing it hundreds of times, you may have to look at all of those pieces to verify that they won&rsquo;t break now that the value of a variable has changed.</p>

<p>So, the take-away: always hide data from yourself. It is the best defensive strategy to protect your code from unexpected changes.</p>

<h3>Additional Resources:</h3>

<p><li><a href="http://www.poodr.com/">Practical Object-Oriented Design in Ruby (POODR)</a> by Sandi Metz</li></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby magic]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/06/15/hidden-ruby-magic-tricks/"/>
    <updated>2014-06-15T17:53:07-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/06/15/hidden-ruby-magic-tricks</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been learning Ruby for about 2-3 months now, and I&rsquo;ve already fallen in love. Hard. The language is so intuitive that often I find myself trying methods in Ruby that I&rsquo;ve never learned about just because I think there is a good chance they&rsquo;ll work. And, often if they don&rsquo;t do exactly what I thought they did, they still do something interesting that is awesome. <!-- more --></p>

<p>In this post, I plan to discuss hidden Ruby tricks that many beginning Rubyists might not know about (yet!) that I&rsquo;ve discovered online or through playing around with Ruby. This is by no means a comprehensive list, but I hope it illustrates a few of Ruby&rsquo;s awesome tricks. They are all included in the <a href="http://ruby-doc.org/">Ruby Documentation</a> if you want to learn more. Also, shout out in the comments if you know of any other good ones to add to the list!</p>

<h2><code>.collect.with_index</code></h2>

<p>This one may seem obvious to most, but it was a happy discovery for me last week when I was trying to solve a problem. I had been familiar with the method <code>.each.with_index</code> for a while, and every time I needed to use indexes while iterating, I used it. However, I prefer <code>.collect</code> over <code>.each</code> in most cases, and was frustrated that I couldn&rsquo;t use indexes with collect. I&rsquo;m not sure why I thought it could only work with <code>.each</code>, but I did for a while. But then I tried it with <code>.collect</code>, and it worked! .<code>collect.with_index</code> is a real thing! So, the method <code>.with_index</code> can work on either <code>.each</code> or <code>.collect</code>.</p>

<p>In general, <code>.collect</code> is preferable to <code>.each</code> in any iteration where you are trying to collect data from a block into a new array. The code written with <code>.collect</code> will be cleaner and more concise, as shown in the example below.</p>

<p>``` ruby each.with_index
array = [1,2,3,4]</p>

<p>new_array = Array.new
array.each.with_index {|num, index| new_array &lt;&lt; num * index }
new_array #=> [0,2,6,12]
```</p>

<p>``` ruby collect.with_index
array = [1,2,3,4]</p>

<p>new_array = array.collect.with_index {|num, index| num * index}
new_array #=> [0,2,6,12]
```</p>

<h2><code>.freeze</code></h2>

<p>Freeze! Because this is Ruby, the method <code>.freeze</code> does exactly what you think it does. It freezes the object from being altered in any way. And you can even check if an object is frozen by asking it if it&rsquo;s frozen! This may be useful if you have a class that you want to alter in your program until a certain condition is met, then if you want the object to be immutable you can just <code>.freeze</code> it from that point on.</p>

<p><code>ruby .freeze
array = [1,2,3]
array.freeze
array.collect! {|num| num * 27}
  #=&gt; "RuntimeError: can't modify frozen Array"
array.frozen?
  #=&gt; true
</code></p>

<h2><code>.to_s(base)</code></h2>

<p>This was a cool discovery for me. If you convert an integer to a string (using <code>.to_s</code>), it can take an argument that will convert it to a different base. It works up to base 36.</p>

<p>``` ruby .to_s(base)</p>

<h1>2 in binary</h1>

<p>2.to_s(2) #=> &ldquo;10&rdquo;</p>

<h1>converting to binary</h1>

<p>5678437.to_s(2) #=> &ldquo;10101101010010101100101&rdquo;</p>

<h1>converting to base 23</h1>

<p>5678437.to_s(23) #=> &ldquo;k6g6d&rdquo;
```</p>

<h2>Splat <code>*</code> symbol</h2>

<p>Splat(<code>*</code>) is very cool and powerful. Here&rsquo;s a few splat tricks I&rsquo;ve learned.</p>

<h3>allows an array to take unspecified amount of arguments</h3>

<p>It allows an array to take any number of arguments, and returns those values in a array. You can use it with other aguments, if you want to separate the first or last argument from the array.</p>

<p>``` ruby splat_power</p>

<h1>splat argument as the only arugment</h1>

<p>def splat_is_awesome(*a)
  a
end</p>

<p>splat_is_awesome(&ldquo;and&rdquo;,&ldquo;it&rdquo;,&ldquo;looks&rdquo;,&ldquo;cool&rdquo;,&ldquo;too&rdquo;)<br/>
 #=> [&ldquo;and&rdquo;, &ldquo;it&rdquo;, &ldquo;looks&rdquo;, &ldquo;cool&rdquo;, &ldquo;too&rdquo;]</p>

<h1>splat as last argument</h1>

<p>def splat_power(a,*b)
  [a,b]
end</p>

<p>splat_power(&ldquo;powerful&rdquo;,&ldquo;stuff&rdquo;,&ldquo;here&rdquo;)
 #=> [&ldquo;powerful&rdquo;, [&ldquo;stuff&rdquo;, &ldquo;here&rdquo;]]</p>

<h1>splat as first argument</h1>

<p>def splat_power_reversed(*a,b)
  [a,b]
end</p>

<p>splat_power_reversed(&ldquo;powerful&rdquo;,&ldquo;stuff&rdquo;,&ldquo;here&rdquo;)
 #=> [[&ldquo;powerful&rdquo;, &ldquo;stuff&rdquo;], &ldquo;here&rdquo;]
```</p>

<h3>converts 1D array to a hash</h3>

<p>I think this is the kind of thing that doesn&rsquo;t seem very useful until you get that one rare type of problem where it ends up being perfect for. If you use splat <code>*</code> on an array as the key in a new Hash, it will automatically split the array into key-value pairs and then create the new hash. Note that it only works when you have an array with an even number of elements.</p>

<p>``` ruby array to hash using splat
animals = [&ldquo;cat&rdquo;,&ldquo;meow&rdquo;,&ldquo;snake&rdquo;,&ldquo;hiss&rdquo;]
Hash[*animals] #=> {&ldquo;cat&rdquo;=>&ldquo;meow&rdquo;, &ldquo;snake&rdquo;=>&ldquo;hiss&rdquo;}</p>

<h1>It first splits the elements into pairs and then creates the Hash:</h1>

<h1>[&ldquo;cat&rdquo;,&ldquo;meow&rdquo;,&ldquo;snake&rdquo;,&ldquo;hiss&rdquo;] ==></h1>

<h1>[&ldquo;cat&rdquo;=>&ldquo;meow&rdquo;,&ldquo;snake&rdquo;=>&ldquo;hiss&rdquo;] ==></h1>

<h1>{&ldquo;cat&rdquo;=>&ldquo;meow&rdquo;, &ldquo;snake&rdquo;=>&ldquo;hiss&rdquo;}</h1>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Useful Ruby resources]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/06/03/useful-ruby-resources/"/>
    <updated>2014-06-03T22:17:00-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/06/03/useful-ruby-resources</id>
    <content type="html"><![CDATA[<p>After being at <i>The Flatiron School</i> for two weeks, I&rsquo;ve come to realize that it&rsquo;s all in the resources. Every task can be done quicker, smarter, and better with the right resources. Considering that, here&rsquo;s an on-going list of awesome resources for the beginning Rubyist that I&rsquo;ve learned about so far. If you know of other great resources not yet included, mention them in the comments! <!-- more --></p>

<h3><a href="http://ruby-doc.org/">Ruby Documentation</a></h3>


<p>Use the documentation! It's the best resource you have. If you want to know what a method does, it will almost always say it in the documentation. If not, the method probably doesn't exist. (But sometimes it does.) Despite that: Use. The. Documentation.</p>




<h3><a href= "http://www.ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html" target="_blank">IRB</a></h3>


<p></p>

<p>For weeks before Flatiron, I was beginning to learn Ruby. And when I wanted to know what a Ruby method did, I would often open up another ruby doc in a text editor and then puts the result to the terminal. Then, on the first day of class, I learned about IRB! IRB stands for "interactive ruby," and is a tool that interactively executes Ruby code in the terminal. Just key in "irb" and Ruby away! Now, every time I'm unsure of a piece of code, I simply check it in irb! Such a time-saver!</p>




<h3><a href= "https://rubygems.org/gems/pry" target="_blank">Pry</a></h3>


<p></p>

<p>Also extremely useful is the RubyGem Pry. Unlike IRB which is great to check a basic piece of syntax, Pry can actually be run in your program and will tell you what piece of information it receives every step of the way. It's crazy useful, and if you are a Ruby developer, an absolute must in debugging.</p>




<h3><a href= "http://www.rubular.com/" target="_blank">Rubular.com</a></h3>


<p>If you know anything about Ruby, you'll know about Regular Expressions (aka "Regex"). And if you know anything about Ruby, I'm sure you have a love-hate relationship with them. Ruby is fondly know as being fairly English-y and intuitive, but I don't really consider things that look like this English:</p>


<p style="text-align: center">/\A[a-z]+\.*[a-z]*@{1}[a-z]+\.[a-z]+\.*[a-z]*\z/</p>


<p>Regexs are extremely powerful in Ruby, because they let you manipulate data in a very complicated yet precise way. But, often they are long and cumbersome. Enter Rubular! In Rubular, you can build your regexs interactively with the data you are trying to manipulate, and conversely, immediately determine what data an already-constructed regex is trying to gather. It's truly priceless for a dedicated Rubyist.</p>



]]></content>
  </entry>
  
</feed>
