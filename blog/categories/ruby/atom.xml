<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | amber tunnell]]></title>
  <link href="http://ambertunnell.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ambertunnell.github.io/"/>
  <updated>2014-10-07T18:34:03-04:00</updated>
  <id>http://ambertunnell.github.io/</id>
  <author>
    <name><![CDATA[Amber Tunnell]]></name>
    <email><![CDATA[amber.tunnell@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sorting Algorithms Series: Merge Sort]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/10/07/merge-sort/"/>
    <updated>2014-10-07T14:54:35-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/10/07/merge-sort</id>
    <content type="html"><![CDATA[<p><strong>Merge Sort</strong> is a divide and conquer sorting algorithm. It is much more efficent than either <a href="http://ambertunnell.github.io/blog/2014/08/20/bubble-sort/">Bubble Sort</a> or <a href="http://localhost:4000/blog/2014/08/23/insertion-sort/">Insertion Sort</a> with an average and worst case time complexity of  O(n log n).</p>

<p>In Merge Sort, you divide a list of items to be in the smallest units possible. You sort the smaller units, then repeatedly merge the small units back together until you have a sorted list.</p>

<ol>
  <li>Take an array of items. Split the array into single subunits.</li>
  <li>Since an item with only one input is considered sorted, merge the subunits together so that you now have subunits with 2 items each.</li>
  <li>Sort each of these 2-item subunits so that they are all ordered correctly.</li>
  <li>Continue merging the subunits together and sorting them individually until you have a completely merged and sorted list.</li>
</ol>




<!-- more -->


<p style="text-align:center;"> <img src="http://upload.wikimedia.org/wikipedia/commons/c/cc/Merge-sort-example-300px.gif" title="Merge Sort" alt="merge sort video" /></p>

<p>As discussed, Merge Sort has a very good time complexity. However, it does not have a good space complexity. Because it doesn&rsquo;t sort in place (like Bubble Sort), you need twice the space of the normal list in order to implement the sort. Despite this drawback, it is still worthwhile because of its efficiency. For example, Merge Sort&rsquo;s worst case time complexity O(n log n) is the same as Quicksort&rsquo;s <em>best case</em> time complexity.</p>

<p>```ruby Merge Sort in Ruby
class MergeSort</p>

<pre><code>def sort(array)

    if array.length &lt;= 1
      return array 
    end

    middle = (array.length / 2.0).round
    length = array.length 

    first_array = array[0...middle]
    second_array = array[middle...length]

    first_sorted_array = sort(first_array)
    second_sorted_array = sort(second_array)

    return merge(first_sorted_array, second_sorted_array)
end

def merge(first_array, second_array)

    return second_array if first_array.empty?
    return first_array if second_array.empty?

    if first_array.first &lt;= second_array.first 
        unit = first_array.shift
    else
        unit = second_array.shift
    end    

    return [unit] + merge(first_array, second_array)
end
</code></pre>

<p>end
print MergeSort.new.sort([4,1,6,3,5,2]) #=> [1, 2, 3, 4, 5, 6]
```</p>

<p><em>This is the third post in a series of posts on various sorting algorithms in computer science. See the entire series <a href="http://ambertunnell.github.io/blog/categories/sorting-algorithms/">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting Algorithms Series: Insertion Sort]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/08/23/insertion-sort/"/>
    <updated>2014-08-23T16:01:26-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/08/23/insertion-sort</id>
    <content type="html"><![CDATA[<p>Like <a href="http://ambertunnell.github.io/blog/2014/08/20/bubble-sort/">Bubble Sort</a>, <strong>Insertion Sort</strong> is a simple sorting algorithm.</p>

<p>Insertion Sort works by iterating up the current array, placing the current element into the correct place in the new sorted array.</p>

<ol>
  <li>First, take the first element of the unsorted array out of the array and put it into an empty new array.</li> 
  <li>Take the next element out of the unsorted array and place it into the new array. If it is smaller than the first element in the new array, swap them. If not, leave it at the end.
  <li>Take the next element out of the array and put it at the end of the new array. If it is larger than the previous end element, leave it. If not, iterate through the array until you find its correct position and insert it there.
  <li>Continue this process until your original array is empty and you have a new completely sorted array.</li>
</ol>




<!-- more -->


<p style="text-align:center;"> <img src="http://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-example-300px.gif" title="Insertion Sort" alt="insertion sort video" /></p>

<p>While more efficent than Bubble Sort, Insertion Sort still has the same average and worse case time complexity of O(n<sup>2</sup>). Like Bubble Sort, it is very inefficient for large data sets, but rather efficient for small data sets or data sets already mostly sorted (the best case time complexity is O(n)).</p>

<p>Implementation of Insertion Sort in Ruby.</p>

<p>```ruby Insertion Sort in Ruby
class InsertionSort</p>

<p>  def initialize(array)</p>

<pre><code>@array = array
@sorted_array = []
</code></pre>

<p>  end</p>

<p>  def sort</p>

<pre><code>j = 0
while @array.length &gt; 0
  @sorted_array &lt;&lt; @array.shift
  if @sorted_array.length &gt; 1 &amp;&amp; @sorted_array[j-1] &gt; @sorted_array[j]
    @sorted_array.each.with_index do |n, i|
      if @sorted_array[i] &gt; @sorted_array[-1]
        @sorted_array[i], @sorted_array[-1] = @sorted_array[-1], @sorted_array[i]
      end
      if (@sorted_array[i] &lt;  @sorted_array[-1]) &amp;&amp; (@sorted_array[i+1] &gt; @sorted_array[-1])
        @sorted_array.insert(i+1, @sorted_array[-1])
        @sorted_array.slice!(-1)
      end
    end 
  end 
  j+=1
end
@sorted_array
</code></pre>

<p>  end
end</p>

<p>print InsertionSort.new([4,1,6,3,5,2]).sort #=> [1, 2, 3, 4, 5, 6]
```</p>

<p>And in JavaScript:</p>

<p>```java Insertion Sort in JavaScript
function insertionSort(array) {</p>

<pre><code>var sortedArray = [];

for (var i = 0; i &lt; array.length; i++) {

    sortedArray.push(array[i]);
    var len = sortedArray.length;

    if ((len &gt; 1) &amp;&amp; (sortedArray[len - 1] &lt; sortedArray[len - 2])) {
        for (var j = 0; j &lt; len; j++) {
            if ((len === 2) &amp;&amp; (sortedArray[j] &gt; sortedArray[len - 1])) 
            {
                var first = sortedArray[j];
                var second = sortedArray[len - 1];

                sortedArray[j] = second;
                sortedArray[len - 1] = first;
            } 
            else if ((sortedArray[j] &lt;= sortedArray[len - 1]) 
            &amp;&amp; (sortedArray[len - 1] &lt;= sortedArray[j + 1])) 
            {
                //Insert the new element where it belongs.
                sortedArray.splice(j + 1, 0, sortedArray[len - 1]); 
                // Delete it from the end of the array.
                sortedArray.splice(sortedArray.length - 1, 1); 
            }
        }
    }
}
return sortedArray;
</code></pre>

<p>}</p>

<p>insertionSort([4, 1, 2, 6, 3, 5]); //=> [1, 2, 3, 4, 5, 6]
```</p>

<p><em>This is the second post in a series of posts on various sorting algorithms in computer science. See the entire series <a href="http://ambertunnell.github.io/blog/categories/sorting-algorithms/">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting Algorithms Series: Bubble Sort]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/08/20/bubble-sort/"/>
    <updated>2014-08-20T21:37:50-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/08/20/bubble-sort</id>
    <content type="html"><![CDATA[<p><em>When I was learning Ruby, we never discussed sorting algorithms. It&rsquo;s my understanding that most sorting algorithm problems can be solved quite easily using built-in methods in most languages. That being said, it is important to understand the different sorting techniques available in computer science. Along those lines, here&rsquo;s a series of blog posts on the most common sorting algorithms!</em></p>

<p>We&rsquo;ll start with Bubble Sort.</p>

<p><strong>Bubble Sort</strong> is a simple sorting algorithm.</p>

<ol>
  <li>You start by comparing the first two items in an array. If the first item is larger than the second, you swap the two items.</li> 
  <li>Then, you compare the second and third items. If the second is larger than the third, you swap them.</li>
  <li>Continue until you reach the end of the array.</li>
  <li>Then, you start from the beginning again and repeat the process until you have one full pass of the array in which you did not swap any items.</li>
  <li>You now have a sorted array!</li>
</ol>




<!-- more -->


<p>The name &lsquo;bubble sort&rsquo; derives from the event of the smaller numbers slowly &lsquo;bubbling&rsquo; to the front of the array through the swapping process.</p>

<p style="text-align:center;"> <img src="http://upload.wikimedia.org/wikipedia/commons/c/c8/Bubble-sort-example-300px.gif" title="Bubble Sort" alt="bubble sort video" /></p>

<p>Here&rsquo;s the bubble sort algorithm implemented in Ruby.</p>

<p>```ruby Bubble Sort in Ruby
class BubbleSort</p>

<p>  def initialize(array)</p>

<pre><code>@array = array
</code></pre>

<p>  end</p>

<p>  def sort</p>

<pre><code>loop do 
  i = 1
  swap_number = 0
   while i &lt; @array.length 
     if @array[i-1] &gt; @array[i]
      @array[i-1], @array[i] = @array[i], @array[i-1] 
      swap_number += 1
     end
     i+=1
   end
  break if swap_number == 0
end 
return @array
</code></pre>

<p>  end</p>

<p>end</p>

<p>print BubbleSort.new([4,1,2,6,3,5]).sort #=> [1, 2, 3, 4, 5, 6]
```</p>

<p>And, here&rsquo;s it in JavaScript.</p>

<p>```java Bubble Sort in JavaScript</p>

<p>function bubbleSort(array) {</p>

<pre><code>var swapNum;

while (swapNum !== 0) {
    swapNum = 0;
    for (var i = 0; i &lt; array.length; i++) {
        if (array[i] &gt; array[i + 1]) {

            var first = array[i]; 
            var second = array[i+1]; 

            array[i] = second; 
            array[i+1] = first;

            swapNum++;
        }
    }

}  
return array;
</code></pre>

<p>}</p>

<p>bubbleSort([4,1,2,6,3,5]); //=> [1, 2, 3, 4, 5, 6]
```</p>

<p>One of the biggest problems with using bubble sort is that it isn&rsquo;t practical on large data sets. It is incredibly inefficient with an average and worst-case time complexity of О(n<sup>2</sup>).</p>

<p>In the best-case where the array is already sorted, the time complexity is O(n) because it only has to do one pass of the array, whereas most other algorithms still have to go through all their steps even when given an already-sorted array.</p>

<p>That being said, bubble sort is still a very undesirable and inefficient sorting technique.</p>

<p><em>This is the first post in a series of posts on various sorting algorithms in computer science. See the entire series <a href="http://ambertunnell.github.io/blog/categories/sorting-algorithms/">here</a>.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Analyzing instance variables in Ruby]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/06/29/analyzing-instance-variables-in-ruby/"/>
    <updated>2014-06-29T21:26:29-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/06/29/analyzing-instance-variables-in-ruby</id>
    <content type="html"><![CDATA[<p>Instance variables in Ruby can be accessed in two ways. Directly with an @ symbol, <code>@variable</code>, or through a method call, <code>self.variable</code>. Many Rubyists think these are synonymous. However, they are not.</p>

<p>By accessing the data through the method call, you are protecting the data from being accessed directly. Therefore, if the data changes unexpectedly, you will only have to adjust the one method. If you access the data directly throughout your code, you may have to change it many times so that your code doesn&rsquo;t break.</p>

<p>It is a fine distinction, but can become an incredibly important one the larger your program is.</p>

<!-- more -->


<p>Here&rsquo;s an example. Let&rsquo;s set up a basic class to get us started.</p>

<p>```ruby Cat class
class Cat</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age
</code></pre>

<p>  end</p>

<p>end<br/>
```
This Cat class can be initialized with two variables: @name and @age.</p>

<p>Now, let&rsquo;s make our class more interesting.</p>

<p>```ruby Cat class
class Cat</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age
</code></pre>

<p>  end</p>

<p>  def age_in_human_years</p>

<pre><code>if @age == 0
  @human_age = 0
elsif @age == 1
  @human_age = 15  
else 
  @human_age = 16 + @age * 4
end  
</code></pre>

<p>  end</p>

<p>end<br/>
```
Now, we have a method that accesses the @age instance variable that is initialized upon instantiation. By using &lsquo;@&rsquo; instead of &lsquo;self&rsquo;, we are directly accessing that variable.</p>

<p>But, what if we wanted a variable that actually equals age + 2? We could add in that variable and use it throughout. Like so:</p>

<p>```ruby Cat class
class Cat</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age
@new_age = age + 2 #=&gt; addition
</code></pre>

<p>  end</p>

<p>  def age_in_human_years</p>

<pre><code>if @new_age == 0 #=&gt; change 1
  @human_age = 0
elsif @new_age == 1 #=&gt; change 2
  @human_age = 15  
else 
  @human_age = 16 + @new_age * 4 #=&gt; change 3 
end  
</code></pre>

<p>  end</p>

<p>end<br/>
<code>``
One could argue that we could've just initialized @age to be equal to age+2, but I think that would go against Ruby convention and confuse matters. Plus, we could then never access both</code>age<code>and</code>age+2<code>.</code>@age` would be stuck at age + 2.</p>

<p>Okay, we made those changes. That wasn&rsquo;t too hard. However, what if we referenced this variable in a thousand different places? It just wouldn&rsquo;t be feasible or desirable to have to comb through the code and change them all.</p>

<p>Here&rsquo;s where <code>self</code> comes in. Let&rsquo;s go back one step and reimplement the example with <code>self</code>.</p>

<p>```ruby Cat class
class Cat</p>

<p>  attr_reader :age</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age
</code></pre>

<p>  end</p>

<p>  def age_in_human_years</p>

<pre><code>if self.age == 0
  @human_age = 0
elsif self.age == 1
  @human_age = 15  
else 
  @human_age = 16 + self.age * 4
end  
</code></pre>

<p>  end</p>

<p>end<br/>
```</p>

<p>So, we changed the <code>@age</code> to <code>self.age</code> throughout. And, added in a <code>attr_reader</code>,  which is shorthand for this method:</p>

<p>```ruby attr_reader
  def age</p>

<pre><code>@age
</code></pre>

<p>  end
```</p>

<p>It merely creates a method that can access the instance variable. So, to clarify, when we reference @age we are accessing the variable data directly. But, when we use self.age (note: the &lsquo;self&rsquo; is actually optional), we are accessing the variable indirectly through this reader method.</p>

<p>So, again, say we want to make that age adjustment and add 2 to the given age.  Instead of adjusting the code accordingly, we can just create our own reader method for that variable.</p>

<p>```ruby Cat class
class Cat</p>

<p>  def age</p>

<pre><code>@age + 2
</code></pre>

<p>  end</p>

<p>  def initialize(name, age)</p>

<pre><code>@name = name
@age = age 
</code></pre>

<p>  end</p>

<p>  def age_in_human_years</p>

<pre><code>if self.age == 0
  @human_age = 0
elsif self.age == 1
  @human_age = 15  
else 
  @human_age = 16 + self.age * 4
end  
</code></pre>

<p>  end</p>

<p>end<br/>
<code>``
The only thing we did this time for that change is delete the default</code>attr_reader<code>method and define a short method that changes the information received when one calls</code>.age<code>. Also, this way, we can preserve access to the original given age, by calling</code>@age<code>, and we can access @age+2, by calling</code>.age`.</p>

<p>The difference may seem insignificant. And, in small programs, it probably is. But, as programs grow larger, this may make a significant difference in how costly one change may be.If you are only directly accessing the data of an instance variable in one place, you only have to change it in one place. But, if you are directly accessing it hundreds of times, you may have to look at all of those pieces to verify that they won&rsquo;t break now that the value of a variable has changed.</p>

<p>So, the take-away: always hide data from yourself. It is the best defensive strategy to protect your code from unexpected changes.</p>

<h3>Additional Resources:</h3>

<p><li><a href="http://www.poodr.com/">Practical Object-Oriented Design in Ruby (POODR)</a> by Sandi Metz</li></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby magic]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/06/15/hidden-ruby-magic-tricks/"/>
    <updated>2014-06-15T17:53:07-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/06/15/hidden-ruby-magic-tricks</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been learning Ruby for about 2-3 months now, and I&rsquo;ve already fallen in love. Hard. The language is so intuitive that often I find myself trying methods in Ruby that I&rsquo;ve never learned about just because I think there is a good chance they&rsquo;ll work. And, often if they don&rsquo;t do exactly what I thought they did, they still do something interesting that is awesome. <!-- more --></p>

<p>In this post, I plan to discuss hidden Ruby tricks that many beginning Rubyists might not know about (yet!) that I&rsquo;ve discovered online or through playing around with Ruby. This is by no means a comprehensive list, but I hope it illustrates a few of Ruby&rsquo;s awesome tricks. They are all included in the <a href="http://ruby-doc.org/">Ruby Documentation</a> if you want to learn more. Also, shout out in the comments if you know of any other good ones to add to the list!</p>

<h2><code>.collect.with_index</code></h2>

<p>This one may seem obvious to most, but it was a happy discovery for me last week when I was trying to solve a problem. I had been familiar with the method <code>.each.with_index</code> for a while, and every time I needed to use indexes while iterating, I used it. However, I prefer <code>.collect</code> over <code>.each</code> in most cases, and was frustrated that I couldn&rsquo;t use indexes with collect. I&rsquo;m not sure why I thought it could only work with <code>.each</code>, but I did for a while. But then I tried it with <code>.collect</code>, and it worked! .<code>collect.with_index</code> is a real thing! So, the method <code>.with_index</code> can work on either <code>.each</code> or <code>.collect</code>.</p>

<p>In general, <code>.collect</code> is preferable to <code>.each</code> in any iteration where you are trying to collect data from a block into a new array. The code written with <code>.collect</code> will be cleaner and more concise, as shown in the example below.</p>

<p>``` ruby each.with_index
array = [1,2,3,4]</p>

<p>new_array = Array.new
array.each.with_index {|num, index| new_array &lt;&lt; num * index }
new_array #=> [0,2,6,12]
```</p>

<p>``` ruby collect.with_index
array = [1,2,3,4]</p>

<p>new_array = array.collect.with_index {|num, index| num * index}
new_array #=> [0,2,6,12]
```</p>

<h2><code>.freeze</code></h2>

<p>Freeze! Because this is Ruby, the method <code>.freeze</code> does exactly what you think it does. It freezes the object from being altered in any way. And you can even check if an object is frozen by asking it if it&rsquo;s frozen! This may be useful if you have a class that you want to alter in your program until a certain condition is met, then if you want the object to be immutable you can just <code>.freeze</code> it from that point on.</p>

<p><code>ruby .freeze
array = [1,2,3]
array.freeze
array.collect! {|num| num * 27}
  #=&gt; "RuntimeError: can't modify frozen Array"
array.frozen?
  #=&gt; true
</code></p>

<h2><code>.to_s(base)</code></h2>

<p>This was a cool discovery for me. If you convert an integer to a string (using <code>.to_s</code>), it can take an argument that will convert it to a different base. It works up to base 36.</p>

<p>``` ruby .to_s(base)</p>

<h1>2 in binary</h1>

<p>2.to_s(2) #=> &ldquo;10&rdquo;</p>

<h1>converting to binary</h1>

<p>5678437.to_s(2) #=> &ldquo;10101101010010101100101&rdquo;</p>

<h1>converting to base 23</h1>

<p>5678437.to_s(23) #=> &ldquo;k6g6d&rdquo;
```</p>

<h2>Splat <code>*</code> symbol</h2>

<p>Splat(<code>*</code>) is very cool and powerful. Here&rsquo;s a few splat tricks I&rsquo;ve learned.</p>

<h3>allows an array to take unspecified amount of arguments</h3>

<p>It allows an array to take any number of arguments, and returns those values in a array. You can use it with other aguments, if you want to separate the first or last argument from the array.</p>

<p>``` ruby splat_power</p>

<h1>splat argument as the only arugment</h1>

<p>def splat_is_awesome(*a)
  a
end</p>

<p>splat_is_awesome(&ldquo;and&rdquo;,&ldquo;it&rdquo;,&ldquo;looks&rdquo;,&ldquo;cool&rdquo;,&ldquo;too&rdquo;)<br/>
 #=> [&ldquo;and&rdquo;, &ldquo;it&rdquo;, &ldquo;looks&rdquo;, &ldquo;cool&rdquo;, &ldquo;too&rdquo;]</p>

<h1>splat as last argument</h1>

<p>def splat_power(a,*b)
  [a,b]
end</p>

<p>splat_power(&ldquo;powerful&rdquo;,&ldquo;stuff&rdquo;,&ldquo;here&rdquo;)
 #=> [&ldquo;powerful&rdquo;, [&ldquo;stuff&rdquo;, &ldquo;here&rdquo;]]</p>

<h1>splat as first argument</h1>

<p>def splat_power_reversed(*a,b)
  [a,b]
end</p>

<p>splat_power_reversed(&ldquo;powerful&rdquo;,&ldquo;stuff&rdquo;,&ldquo;here&rdquo;)
 #=> [[&ldquo;powerful&rdquo;, &ldquo;stuff&rdquo;], &ldquo;here&rdquo;]
```</p>

<h3>converts 1D array to a hash</h3>

<p>I think this is the kind of thing that doesn&rsquo;t seem very useful until you get that one rare type of problem where it ends up being perfect for. If you use splat <code>*</code> on an array as the key in a new Hash, it will automatically split the array into key-value pairs and then create the new hash. Note that it only works when you have an array with an even number of elements.</p>

<p>``` ruby array to hash using splat
animals = [&ldquo;cat&rdquo;,&ldquo;meow&rdquo;,&ldquo;snake&rdquo;,&ldquo;hiss&rdquo;]
Hash[*animals] #=> {&ldquo;cat&rdquo;=>&ldquo;meow&rdquo;, &ldquo;snake&rdquo;=>&ldquo;hiss&rdquo;}</p>

<h1>It first splits the elements into pairs and then creates the Hash:</h1>

<h1>[&ldquo;cat&rdquo;,&ldquo;meow&rdquo;,&ldquo;snake&rdquo;,&ldquo;hiss&rdquo;] ==></h1>

<h1>[&ldquo;cat&rdquo;=>&ldquo;meow&rdquo;,&ldquo;snake&rdquo;=>&ldquo;hiss&rdquo;] ==></h1>

<h1>{&ldquo;cat&rdquo;=>&ldquo;meow&rdquo;, &ldquo;snake&rdquo;=>&ldquo;hiss&rdquo;}</h1>

<p>```</p>
]]></content>
  </entry>
  
</feed>
