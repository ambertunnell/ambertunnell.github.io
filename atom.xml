<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[amber tunnell]]></title>
  <link href="http://ambertunnell.github.io/atom.xml" rel="self"/>
  <link href="http://ambertunnell.github.io/"/>
  <updated>2014-06-18T13:48:29-04:00</updated>
  <id>http://ambertunnell.github.io/</id>
  <author>
    <name><![CDATA[Amber Tunnell]]></name>
    <email><![CDATA[amber.tunnell@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Ruby magic]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/06/15/hidden-ruby-magic-tricks/"/>
    
    <updated>2014-06-15T17:53:07-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/06/15/hidden-ruby-magic-tricks</id>
    
    <content type="html"><![CDATA[<p>I&rsquo;ve been learning Ruby for about 2-3 months now, and I&rsquo;ve already fallen in love. Hard. The language is so intuitive that often I find myself trying methods in Ruby that I&rsquo;ve never learned about just because I think there is a good chance they&rsquo;ll work. And, often if they don&rsquo;t do exactly what I thought they did, they still do something interesting that is awesome.</p>

<p>In this post, I plan to discuss hidden Ruby tricks that many beginning Rubyists might not know about (yet!) that I&rsquo;ve discovered online or through playing around with Ruby. This is by no means a comprehensive list, but I hope it illustrates a few of Ruby&rsquo;s awesome tricks. They are all included in the <a href="http://ruby-doc.org/">Ruby Documentation</a> if you want to learn more. Also, shout out in the comments if you know of any other good ones to add to the list!</p>

<h2><code>.collect.with_index</code></h2>

<p>This one may seem obvious to most, but it was a happy discovery for me last week when I was trying to solve a problem. I had been familiar with the method <code>.each.with_index</code> for a while, and every time I needed to use indexes while iterating, I used it. But, as most Rubyists do, I vastly prefer <code>.collect</code> over <code>.each</code> in most cases, and was frustrated that I couldn&rsquo;t use indexes with collect. I&rsquo;m not sure why I thought it could only work with .each, but I did for a while. But then I tried it, and it worked! .<code>collect.with_index</code> is a real thing! So, the method <code>.with_index</code> can work on either <code>.each</code> or <code>.collect</code>.</p>

<figure class='code'><figcaption><span>each.with_index </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">new_array</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">each</span><span class="o">.</span><span class="n">with_index</span> <span class="p">{</span><span class="o">|</span><span class="n">num</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span> <span class="n">new_array</span> <span class="o">&lt;&lt;</span> <span class="n">num</span> <span class="o">*</span> <span class="n">index</span> <span class="p">}</span>
</span><span class='line'><span class="n">new_array</span> <span class="c1">#=&gt; [0,2,6,12]</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>collect.with_index </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">new_array</span> <span class="o">=</span> <span class="n">array</span><span class="o">.</span><span class="n">collect</span><span class="o">.</span><span class="n">with_index</span> <span class="p">{</span><span class="o">|</span><span class="n">num</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span> <span class="n">num</span> <span class="o">*</span> <span class="n">index</span><span class="p">}</span>
</span><span class='line'><span class="n">new_array</span> <span class="c1">#=&gt; [0,2,6,12]</span>
</span></code></pre></td></tr></table></div></figure>


<h2><code>.freeze</code></h2>

<p>Freeze! Because this is Ruby, the method <code>.freeze</code> does exactly what you think it does. It freezes the object from being altered in any way. And you can even check if an object is frozen by asking it if it&rsquo;s frozen!</p>

<figure class='code'><figcaption><span>.freeze </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">freeze</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">collect!</span> <span class="p">{</span><span class="o">|</span><span class="n">num</span><span class="o">|</span> <span class="n">num</span> <span class="o">*</span> <span class="mi">27</span><span class="p">}</span>
</span><span class='line'>  <span class="c1">#=&gt; &quot;RuntimeError: can&#39;t modify frozen Array&quot;</span>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">frozen?</span>
</span><span class='line'>  <span class="c1">#=&gt; true </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2><code>.to_s(base)</code></h2>

<p>This was a cool discovery for me. If you convert an integer to a string (using <code>.to_s</code>), it can take an argument that will convert it to a different base. It works up to base 36.</p>

<figure class='code'><figcaption><span>.to_s(base)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#2 in binary</span>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; &quot;10&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#converting to binary</span>
</span><span class='line'><span class="mi">5678437</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt; &quot;10101101010010101100101&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#converting to base 23</span>
</span><span class='line'><span class="mi">5678437</span><span class="o">.</span><span class="n">to_s</span><span class="p">(</span><span class="mi">23</span><span class="p">)</span> <span class="c1">#=&gt; &quot;k6g6d&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Splat <code>*</code> symbol</h2>

<p>Splat(<code>*</code>) is very cool and powerful. Here&rsquo;s a few splat tricks I&rsquo;ve learned.</p>

<h3>allows an array to take unspecified amount of arguments</h3>

<p>It allows an array to take any number of arguments, and returns those values in a array. You can use it with other aguments, if you want to separate the first or last argument from the array.</p>

<figure class='code'><figcaption><span>splat_power</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#splat argument as the only arugment </span>
</span><span class='line'><span class="k">def</span> <span class="nf">splat_is_awesome</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">splat_is_awesome</span><span class="p">(</span><span class="s2">&quot;and&quot;</span><span class="p">,</span><span class="s2">&quot;it&quot;</span><span class="p">,</span><span class="s2">&quot;looks&quot;</span><span class="p">,</span><span class="s2">&quot;cool&quot;</span><span class="p">,</span><span class="s2">&quot;too&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="c1">#=&gt; [&quot;and&quot;, &quot;it&quot;, &quot;looks&quot;, &quot;cool&quot;, &quot;too&quot;] </span>
</span><span class='line'>
</span><span class='line'><span class="c1">#splat as last argument</span>
</span><span class='line'><span class="k">def</span> <span class="nf">splat_power</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="o">*</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">splat_power</span><span class="p">(</span><span class="s2">&quot;powerful&quot;</span><span class="p">,</span><span class="s2">&quot;stuff&quot;</span><span class="p">,</span><span class="s2">&quot;here&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="c1">#=&gt; [&quot;powerful&quot;, [&quot;stuff&quot;, &quot;here&quot;]] </span>
</span><span class='line'>
</span><span class='line'><span class="c1">#splat as first argument</span>
</span><span class='line'><span class="k">def</span> <span class="nf">splat_power_reversed</span><span class="p">(</span><span class="o">*</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
</span><span class='line'>  <span class="o">[</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">splat_power_reversed</span><span class="p">(</span><span class="s2">&quot;powerful&quot;</span><span class="p">,</span><span class="s2">&quot;stuff&quot;</span><span class="p">,</span><span class="s2">&quot;here&quot;</span><span class="p">)</span>
</span><span class='line'> <span class="c1">#=&gt; [[&quot;powerful&quot;, &quot;stuff&quot;], &quot;here&quot;] </span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>converts 1D array to a hash</h3>

<p>I think this is the kind of thing that doesn&rsquo;t seem very useful until you get that one rare type of problem where it ends up being perfect for. If you use splat <code>*</code> on an array as the key in a new Hash, it will automatically split the array into key-value pairs and then create the new hash. Note that it only works when you have an array with an even number of elements.</p>

<figure class='code'><figcaption><span>array to hash using splat</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">animals</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;cat&quot;</span><span class="p">,</span><span class="s2">&quot;meow&quot;</span><span class="p">,</span><span class="s2">&quot;snake&quot;</span><span class="p">,</span><span class="s2">&quot;hiss&quot;</span><span class="o">]</span>
</span><span class='line'><span class="no">Hash</span><span class="o">[*</span><span class="n">animals</span><span class="o">]</span> <span class="c1">#=&gt; {&quot;cat&quot;=&gt;&quot;meow&quot;, &quot;snake&quot;=&gt;&quot;hiss&quot;} </span>
</span><span class='line'>
</span><span class='line'><span class="c1">#It first splits the elements into pairs and then creates the Hash: </span>
</span><span class='line'><span class="c1"># [&quot;cat&quot;,&quot;meow&quot;,&quot;snake&quot;,&quot;hiss&quot;] ==&gt; </span>
</span><span class='line'><span class="c1"># [&quot;cat&quot;=&gt;&quot;meow&quot;,&quot;snake&quot;=&gt;&quot;hiss&quot;] ==&gt; </span>
</span><span class='line'><span class="c1"># {&quot;cat&quot;=&gt;&quot;meow&quot;, &quot;snake&quot;=&gt;&quot;hiss&quot;}  </span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
    
  </entry>
  
  <entry>
    
    <title type="html"><![CDATA[Awesome Ruby Resources]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/06/03/awesome-ruby-resources/"/>
    
    <updated>2014-06-03T22:17:00-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/06/03/awesome-ruby-resources</id>
    
    <content type="html"><![CDATA[<p>After being at <i>The Flatiron School</i> for two weeks, I&rsquo;ve come to realize that it&rsquo;s all in the resources. Every task can be done quicker, smarter, and better with the right resources. Considering that, here&rsquo;s an on-going list of awesome resources for the beginning Rubyist that I&rsquo;ve learned about so far. If you know of other great resources not yet included, mention them in the comments!</p>

<h3><a href="http://ruby-doc.org/">Ruby Documentation</a></h3>


<p>Use the documentation! It&#8217;s the best resource you have. If you want to know what a method does, it will almost always say it in the documentation. If not, the method probably doesn&#8217;t exist. (But sometimes it does.) Despite that: Use. The. Documentation.</p>




<h3><a href= "http://www.ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html" target="_blank">IRB</a></h3>


<p></p>

<p>For weeks before Flatiron, I was beginning to learn Ruby. And when I wanted to know what a Ruby method did, I would often open up another ruby doc in a text editor and then puts the result to the terminal. Then, on the first day of class, I learned about IRB! IRB stands for &#8220;interactive ruby,&#8221; and is a tool that interactively executes Ruby code in the terminal. Just key in &#8220;irb&#8221; and Ruby away! Now, every time I&#8217;m unsure of a piece of code, I simply check it in irb! Such a time-saver!</p>




<h3><a href= "https://rubygems.org/gems/pry" target="_blank">Pry</a></h3>


<p></p>

<p>Also extremely useful is the RubyGem Pry. Unlike IRB which is great to check a basic piece of syntax, Pry can actually be run in your program and will tell you what piece of information it receives every step of the way. It&#8217;s crazy useful, and if you are a Ruby developer, an absolute must in debugging.</p>




<h3><a href= "http://www.rubular.com/" target="_blank">Rubular.com</a></h3>


<p>If you know anything about Ruby, you&#8217;ll know about Regular Expressions (aka &#8220;Regex&#8221;). And if you know anything about Ruby, I&#8217;m sure you have a love-hate relationship with them. Ruby is fondly know as being fairly English-y and intuitive, but I don&#8217;t really consider things that look like this English:</p>


<p style="text-align: center">/\A[a-z]+&#46;*[a-z]*@{1}[a-z]+&#46;[a-z]+&#46;*[a-z]*\z/</p>


<p>Regexs are extremely powerful in Ruby, because they let you manipulate data in a very complicated yet precise way. But, often they are long and cumbersome. Enter Rubular! In Rubular, you can build your regexs interactively with the data you are trying to manipulate, and conversely, immediately determine what data an already-constructed regex is trying to gather. It&#8217;s truly priceless for a dedicated Rubyist.</p>



]]></content>
    
  </entry>
  
</feed>