<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[amber tunnell]]></title>
  <link href="http://ambertunnell.github.io/atom.xml" rel="self"/>
  <link href="http://ambertunnell.github.io/"/>
  <updated>2014-06-15T15:42:46-04:00</updated>
  <id>http://ambertunnell.github.io/</id>
  <author>
    <name><![CDATA[Amber Tunnell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    
    <title type="html"><![CDATA[Awesome Ruby Resources]]></title>
    <link href="http://ambertunnell.github.io/blog/2014/06/03/awesome-ruby-resources/"/>
    
    <updated>2014-06-03T22:17:00-04:00</updated>
    <id>http://ambertunnell.github.io/blog/2014/06/03/awesome-ruby-resources</id>
    
    <content type="html"><![CDATA[<p>After being at <i>The Flatiron School</i> for 2 weeks, I&rsquo;ve come to realize that it&rsquo;s all in the resources. Every task can be done quicker, smarter, and better with the right resources. Considering that, here&rsquo;s an on-going list of awesome basic Ruby resources that I&rsquo;ve learned about so far.</p>

<h3><a href= "http://www.ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html" target="_blank">IRB</a></h3>


<p></p>

<p>For weeks before Flatiron, I was beginning to learn Ruby. And when I wanted to know what a Ruby method did, I would often open up another ruby doc in a text editor and then puts the result to the terminal. Then, on the first day of class, I learned about IRB! IRB stands for &#8220;interactive ruby,&#8221; and is a tool that interactively executes Ruby code in the terminal. Just key in &#8220;irb&#8221; and Ruby away! Now, every time I&#8217;m unsure of a piece of code, I simply check it in irb! Such a time-saver!</p>




<h3><a href= "https://rubygems.org/gems/pry" target="_blank">Pry</a></h3>


<p></p>

<p>Also extremely useful is the RubyGem Pry. Unlike IRB which is great to check a basic piece of syntax, Pry can actually be run in your program and will tell you what piece of information it receives every step of the way. It&#8217;s crazy useful, and if you are a Ruby developer, an absolute must in debugging.</p>




<h3><a href= "http://www.rubular.com/" target="_blank">Rubular.com</a></h3>


<p>If you know anything about Ruby, you&#8217;ll know about Regular Expressions (aka &#8220;Regex&#8221;). And if you know anything about Ruby, I&#8217;m sure you have a love-hate relationship with them. Ruby is fondly know as being fairly English-y and intuitive, but I don&#8217;t really consider things that look like this English:</p>


<p style="text-align: center">/\A[a-z]+&#46;*[a-z]*@{1}[a-z]+&#46;[a-z]+&#46;*[a-z]*\z/</p>


<p>Regexs are extremely powerful in Ruby, because they let you manipulate data in a very complicated yet precise way. But, often they are long and cumbersome. Enter Rubular! In Rubular, you can build your regexs interactively with the data you are trying to manipulate, and conversely, immediately determine what data an already-constructed regex is trying to gather. It&#8217;s truly priceless for a dedicated Rubyist.</p>



]]></content>
    
  </entry>
  
</feed>